import { ref } from 'vue'
import type { LocationResult, AnalysisResult, SearchParams } from '@/types'
import { googleMapsService } from '@/services/googleMapsService'
import { yandexMapsService } from '@/services/yandexMapsService'
import { twoGisService } from '@/services/twoGisService'
import { websiteAnalysisService } from '@/services/websiteAnalysisService'
import { scoringService } from '@/services/scoringService'

export interface AnalysisStep {
    id: string
    title: string
    description: string
    status: 'pending' | 'running' | 'completed' | 'error'
    progress: number
    duration: number // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

export function useRestaurantAnalysis() {
    const isLoading = ref(false)
    const error = ref<string | null>(null)
    const analysisSteps = ref<AnalysisStep[]>([])
    const currentStepIndex = ref(0)

    const initializeAnalysisSteps = () => {
        analysisSteps.value = [
            {
                id: 'platform-search',
                title: '–ü–æ–∏—Å–∫ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º',
                description: '–ü—Ä–æ–≤–µ—Ä—è–µ–º Google Search –∏ 2GIS –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞...',
                status: 'pending',
                progress: 0,
                duration: 2500
            },
            {
                id: 'data-extraction',
                title: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–∑–Ω–µ—Å–µ',
                description: '–°–æ–±–∏—Ä–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏, –æ—Ç–∑—ã–≤—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ 2GIS...',
                status: 'pending',
                progress: 0,
                duration: 3000
            },
            {
                id: 'website-analysis',
                title: '–ê–Ω–∞–ª–∏–∑ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è',
                description: '–û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–∞ –∏ SEO –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...',
                status: 'pending',
                progress: 0,
                duration: 2000
            },
            {
                id: 'competitor-research',
                title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
                description: '–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–∞—à—É –≤–∏–¥–∏–º–æ—Å—Ç—å —Å –º–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏...',
                status: 'pending',
                progress: 0,
                duration: 2500
            },
            {
                id: 'scoring-analysis',
                title: '–†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤',
                description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–ª–ª—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏...',
                status: 'pending',
                progress: 0,
                duration: 1500
            }
        ]
        currentStepIndex.value = 0
    }

    const runAnalysisStep = async (step: AnalysisStep): Promise<void> => {
        step.status = 'running'

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —à–∞–≥–∞–º–∏
        const progressIncrements = 10
        const incrementDelay = step.duration / progressIncrements

        for (let i = 0; i <= progressIncrements; i++) {
            step.progress = (i / progressIncrements) * 100
            await new Promise(resolve => setTimeout(resolve, incrementDelay))
        }

        step.status = 'completed'
        step.progress = 100
    }

    const getApiStatus = () => {
        const googleKey = import.meta.env.VITE_GOOGLE_SEARCH_API_KEY
        const yandexStatus = yandexMapsService.getServiceStatus()
        const twoGisStatus = twoGisService.getServiceStatus()

        return {
            google: {
                working: !!googleKey,
                keyType: googleKey ? 'search' : 'none',
                message: googleKey ? 'Google Search API –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫)' : 'Google API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            },
            yandex: {
                working: yandexStatus.working,
                keyType: 'map',
                message: '–í–∏–¥–∂–µ—Ç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã)'
            },
            twoGis: twoGisStatus,
            overall: {
                workingServices: [!!googleKey, twoGisStatus.working].filter(Boolean).length,
                totalServices: 2,
                message: twoGisStatus.keyType === 'mapgl'
                    ? '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å 2GIS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ MapGL –∫–ª—é—á–∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Catalog API'
                    : '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç'
            }
        }
    }

    const searchLocations = async (query: string): Promise<LocationResult[]> => {
        isLoading.value = true
        error.value = null

        try {
            const searchParams: SearchParams = {
                query,
                location: 'Kazakhstan',
                radius: 50000 // 50km radius
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const apiStatus = getApiStatus()
            console.log('–°—Ç–∞—Ç—É—Å API:', apiStatus)

            // –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            const [googleResults, twoGisResults] = await Promise.allSettled([
                googleMapsService.searchPlaces(searchParams),
                twoGisService.searchPlaces(searchParams).catch((error: any) => {
                    console.warn('–ü–æ–∏—Å–∫ 2GIS –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', error.message)
                    return []
                })
            ])

            const allResults: LocationResult[] = []

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Google
            if (googleResults.status === 'fulfilled') {
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Google:', googleResults.value.length)
                allResults.push(...googleResults.value)
            } else {
                console.warn('–ü–æ–∏—Å–∫ Google –Ω–µ —É–¥–∞–ª—Å—è:', googleResults.reason)
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 2GIS
            if (twoGisResults.status === 'fulfilled') {
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã 2GIS:', twoGisResults.value.length)
                allResults.push(...twoGisResults.value)
            } else {
                console.warn('–ü–æ–∏—Å–∫ 2GIS –Ω–µ —É–¥–∞–ª—Å—è:', twoGisResults.reason)
            }

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏–º–µ–Ω–∏ –∏ –∞–¥—Ä–µ—Å–∞
            const uniqueResults = removeDuplicateLocations(allResults)

            console.log('–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', uniqueResults.length)
            return uniqueResults.slice(0, 10) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞'
            error.value = errorMessage
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', errorMessage)
            return []
        } finally {
            isLoading.value = false
        }
    }

    // –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ –ª–æ–∫–∞—Ü–∏–∏
    const searchCompetitors = async (location: LocationResult, radius: number = 500): Promise<LocationResult[]> => {
        try {
            console.log(`üîç –ò—â–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ ${location.name} –≤ —Ä–∞–¥–∏—É—Å–µ ${radius}–º`)

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–≤–µ–¥–µ–Ω–∏–π –ø–∏—Ç–∞–Ω–∏—è
            const competitorQueries = [
                '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
                '–∫–∞—Ñ–µ',
                '—Å—Ç–æ–ª–æ–≤–∞—è',
                '–±—ã—Å—Ç—Ä–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
                '—Ñ–∞—Å—Ç—Ñ—É–¥',
                '–ø–∏—Ü—Ü–µ—Ä–∏—è',
                '—Å—É—à–∏',
                '–±–∞—Ä'
            ]

            const competitors: LocationResult[] = []

            // –ò—â–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è
            for (const query of competitorQueries) {
                try {
                    const searchParams: SearchParams = {
                        query,
                        location: `${location.coordinates.lat},${location.coordinates.lng}`,
                        radius
                    }

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 2GIS –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                    const results = await twoGisService.searchPlaces(searchParams)

                    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                    const filteredResults = results.filter(result => {
                        // –ù–µ –≤–∫–ª—é—á–∞–µ–º —Ç–æ—Ç –∂–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
                        if (result.name.toLowerCase() === location.name.toLowerCase()) {
                            return false
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        const distance = calculateDistance(
                            location.coordinates.lat,
                            location.coordinates.lng,
                            result.coordinates.lat,
                            result.coordinates.lng
                        )

                        return distance <= radius
                    })

                    competitors.push(...filteredResults)
                } catch (err) {
                    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ${query}:`, err)
                }
            }

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            const uniqueCompetitors = removeDuplicateLocations(competitors)

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            const sortedCompetitors = uniqueCompetitors
                .map(competitor => ({
                    ...competitor,
                    distance: calculateDistance(
                        location.coordinates.lat,
                        location.coordinates.lng,
                        competitor.coordinates.lat,
                        competitor.coordinates.lng
                    )
                }))
                .sort((a, b) => a.distance - b.distance)
                .slice(0, 15) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 –±–ª–∏–∂–∞–π—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                .map(({ distance, ...competitor }) => competitor) // –£–¥–∞–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ distance

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${sortedCompetitors.length} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ ${location.name}`)

            return sortedCompetitors
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', err)
            return []
        }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –•–∞–≤–µ—Ä—Å–∏–Ω–∞)
    const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {
        const R = 6371e3 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        const œÜ1 = lat1 * Math.PI / 180
        const œÜ2 = lat2 * Math.PI / 180
        const ŒîœÜ = (lat2 - lat1) * Math.PI / 180
        const ŒîŒª = (lng2 - lng1) * Math.PI / 180

        const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
            Math.cos(œÜ1) * Math.cos(œÜ2) *
            Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2)
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))

        return R * c // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
    }

    const analyzeLocation = async (location: LocationResult): Promise<AnalysisResult> => {
        isLoading.value = true
        error.value = null

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–≥–∏ –∞–Ω–∞–ª–∏–∑–∞
            initializeAnalysisSteps()

            console.log('–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è:', location.name, '–∏–∑', location.source)

            // –®–∞–≥ 1: –ü–æ–∏—Å–∫ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            currentStepIndex.value = 0
            await runAnalysisStep(analysisSteps.value[0])

            // –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            currentStepIndex.value = 1
            const dataExtractionPromise = runAnalysisStep(analysisSteps.value[1])

            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            const [twoGisData, websiteData] = await Promise.allSettled([
                twoGisService.getPlaceDetails(location.id).catch((error: any) => {
                    console.warn('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞ 2GIS –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message)
                    return undefined
                }),
                websiteAnalysisService.analyzeWebsite(location.name, location.address).catch((error: any) => {
                    console.warn('–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è:', error.message)
                    return undefined
                })
            ])

            await dataExtractionPromise

            // –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞
            currentStepIndex.value = 2
            await runAnalysisStep(analysisSteps.value[2])

            // –®–∞–≥ 4: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            currentStepIndex.value = 3
            await runAnalysisStep(analysisSteps.value[3])

            // –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫
            currentStepIndex.value = 4
            const scoringPromise = runAnalysisStep(analysisSteps.value[4])

            const apiResponse = {
                twoGis: twoGisData.status === 'fulfilled' ? twoGisData.value : undefined,
                website: websiteData.status === 'fulfilled' ? websiteData.value : undefined
            }

            console.log('–°–≤–æ–¥–∫–∞ –æ—Ç–≤–µ—Ç–∞ API:', {
                twoGis: !!apiResponse.twoGis,
                website: !!apiResponse.website
            })

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            const analysisResult = await scoringService.calculateScore(apiResponse)

            await scoringPromise

            return analysisResult
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω'
            error.value = errorMessage
            console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', errorMessage)
            throw err
        } finally {
            isLoading.value = false
        }
    }

    const removeDuplicateLocations = (locations: LocationResult[]): LocationResult[] => {
        const seen = new Set<string>()
        return locations.filter(location => {
            // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const normalizedName = location.name.toLowerCase().replace(/[^\w\s]/g, '').trim()
            const normalizedAddress = location.address.toLowerCase().replace(/[^\w\s]/g, '').trim()
            const key = `${normalizedName}_${normalizedAddress}_${location.city.toLowerCase()}`

            if (seen.has(key)) {
                return false
            }
            seen.add(key)
            return true
        })
    }

    return {
        isLoading,
        error,
        analysisSteps,
        currentStepIndex,
        searchLocations,
        analyzeLocation,
        searchCompetitors, // –ù–û–í–û–ï: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        getApiStatus
    }
} 