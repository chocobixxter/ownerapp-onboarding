import type { LocationResult, OnboardingData, AnalysisResult } from '@/types'

export interface ContactFormData {
    name: string
    phone: string
    position?: string
    privacyConsent: boolean
}

export interface SlackNotificationData {
    type: 'full_analysis' | 'smart_analysis'
    contactInfo: ContactFormData
    locationData: LocationResult
    timestamp: string

    // Additional data for full analysis
    onboardingData?: OnboardingData
    analysisResult?: AnalysisResult
}

class SlackService {
    private readonly bffUrl: string

    constructor() {
        this.bffUrl = import.meta.env.VITE_BFF_URL || 'http://localhost:3001'
    }

    /**
     * Send notification for full analysis completion
     */
    async sendFullAnalysisNotification(
        contactInfo: ContactFormData,
        onboardingData: OnboardingData,
        analysisResult?: AnalysisResult
    ): Promise<boolean> {
        if (!this.bffUrl) {
            console.warn('BFF URL not configured')
            return false
        }

        const locationData = onboardingData.selectedRestaurant
        if (!locationData) {
            console.error('No location data available for Slack notification')
            return false
        }

        const slackMessage = this.formatFullAnalysisMessage({
            type: 'full_analysis',
            contactInfo,
            locationData,
            onboardingData,
            analysisResult,
            timestamp: new Date().toISOString()
        })

        return this.sendSlackMessage(slackMessage)
    }

    /**
     * Send notification for smart/quick analysis completion
     */
    async sendSmartAnalysisNotification(
        contactInfo: ContactFormData,
        locationData: LocationResult,
        analysisResult?: AnalysisResult
    ): Promise<boolean> {
        if (!this.bffUrl) {
            console.warn('BFF URL not configured')
            return false
        }

        const slackMessage = this.formatSmartAnalysisMessage({
            type: 'smart_analysis',
            contactInfo,
            locationData,
            analysisResult,
            timestamp: new Date().toISOString()
        })

        return this.sendSlackMessage(slackMessage)
    }

    /**
     * Format Slack message for full analysis
     */
    private formatFullAnalysisMessage(data: SlackNotificationData): any {
        const { contactInfo, locationData, onboardingData, analysisResult } = data
        const restaurantData = onboardingData?.restaurantData

        const blocks = [
            {
                type: "header",
                text: {
                    type: "plain_text",
                    text: "üéØ –ù–æ–≤—ã–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω"
                }
            },
            {
                type: "section",
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*–ò–º—è:*\n${contactInfo.name}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–¢–µ–ª–µ—Ñ–æ–Ω:*\n${contactInfo.phone}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–î–æ–ª–∂–Ω–æ—Å—Ç—å:*\n${contactInfo.position || 'Not specified'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:*\n${new Date(data.timestamp).toLocaleString('ru-RU')}`
                    }
                ]
            },
            {
                type: "divider"
            },
            {
                type: "section",
                text: {
                    type: "mrkdwn",
                    text: "*üè™ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ*"
                },
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*–ù–∞–∑–≤–∞–Ω–∏–µ:*\n${locationData.name}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–ê–¥—Ä–µ—Å:*\n${locationData.address}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–ì–æ—Ä–æ–¥:*\n${locationData.city}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:*\n${locationData.coordinates.lat}, ${locationData.coordinates.lng}`
                    }
                ]
            }
        ]

        // Add business details if available
        if (restaurantData) {
            blocks.push({
                type: "section",
                text: {
                    type: "mrkdwn",
                    text: "*üíº –î–µ—Ç–∞–ª–∏ –±–∏–∑–Ω–µ—Å–∞*"
                },
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*–¢–µ–ª–µ—Ñ–æ–Ω:*\n${restaurantData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*Email:*\n${restaurantData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–°–∞–π—Ç:*\n${restaurantData.website || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–¢–∏–ø:*\n${this.formatRestaurantType(restaurantData.restaurantType)}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–ö—É—Ö–Ω—è:*\n${restaurantData.cuisineType || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:*\n${restaurantData.averageCheck ? `${restaurantData.averageCheck} ‚Ç∏` : '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å:*\n${restaurantData.ordersPerDay || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–£—Å–ª—É–≥–∏:*\n${this.formatServices(restaurantData)}`
                    }
                ]
            })
        }

        // Add problems and goals
        if (onboardingData?.problems && onboardingData?.goals) {
            const problemsList = this.formatProblemsGoals(onboardingData.problems, 'problems')
            const goalsList = this.formatProblemsGoals(onboardingData.goals, 'goals')

            blocks.push({
                type: "section",
                text: {
                    type: "mrkdwn",
                    text: "*üéØ –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ü–µ–ª–∏*"
                },
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*–ü—Ä–æ–±–ª–µ–º—ã:*\n${problemsList}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–¶–µ–ª–∏:*\n${goalsList}`
                    }
                ]
            })
        }

        // Add analysis results if available
        if (analysisResult) {
            blocks.push({
                type: "section",
                text: {
                    type: "mrkdwn",
                    text: "*üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞*"
                },
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*–û–±—â–∏–π –±–∞–ª–ª:*\n${analysisResult.totalScore}/100`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–û—Ü–µ–Ω–∫–∞:*\n${this.formatGrade(analysisResult.overallGrade)}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ:*\n${analysisResult.problems.length}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:*\n${analysisResult.recommendations.length}`
                    }
                ]
            })
        }

        return {
            text: `–ù–æ–≤—ã–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ${contactInfo.name} - ${locationData.name}`,
            blocks
        }
    }

    /**
 * Format Slack message for smart analysis
 */
    private formatSmartAnalysisMessage(data: SlackNotificationData): any {
        const { contactInfo, locationData, analysisResult } = data

        const blocks = [
            {
                type: "header",
                text: {
                    type: "plain_text",
                    text: "‚ö° –ù–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω"
                }
            },
            {
                type: "section",
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:*\n${contactInfo.name}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–¢–µ–ª–µ—Ñ–æ–Ω:*\n${contactInfo.phone}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–î–æ–ª–∂–Ω–æ—Å—Ç—å:*\n${contactInfo.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–í—Ä–µ–º—è:*\n${new Date(data.timestamp).toLocaleString('ru-RU')}`
                    }
                ]
            },
            {
                type: "divider"
            },
            {
                type: "section",
                text: {
                    type: "mrkdwn",
                    text: "*üè™ Restaurant Information*"
                },
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*Name:*\n${locationData.name}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*Address:*\n${locationData.address}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*City:*\n${locationData.city}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*Coordinates:*\n${locationData.coordinates.lat}, ${locationData.coordinates.lng}`
                    }
                ]
            }
        ]

        // Add analysis results if available
        if (analysisResult) {
            blocks.push({
                type: "section",
                text: {
                    type: "mrkdwn",
                    text: "*üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞*"
                },
                fields: [
                    {
                        type: "mrkdwn",
                        text: `*–û–±—â–∏–π –±–∞–ª–ª:*\n${analysisResult.totalScore}/100`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–û—Ü–µ–Ω–∫–∞:*\n${this.formatGrade(analysisResult.overallGrade)}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ:*\n${analysisResult.problems.length}`
                    },
                    {
                        type: "mrkdwn",
                        text: `*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:*\n${analysisResult.recommendations.length}`
                    }
                ]
            })
        }

        return {
            text: `–ù–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑: ${contactInfo.name} - ${locationData.name}`,
            blocks
        }
    }

    /**
 * Helper method to format services
 */
    private formatServices(restaurantData: any): string {
        const services = []
        if (restaurantData.hasDelivery) services.push('–î–æ—Å—Ç–∞–≤–∫–∞')
        if (restaurantData.hasTakeaway) services.push('–°–∞–º–æ–≤—ã–≤–æ–∑')
        if (restaurantData.hasTableReservation) services.push('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤')
        if (restaurantData.hasLoyaltyProgram) services.push('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏')

        return services.length > 0 ? services.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
    }

    /**
     * Helper method to format restaurant type
     */
    private formatRestaurantType(type: string | undefined): string {
        const types: { [key: string]: string } = {
            'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
            'cafe': '–ö–∞—Ñ–µ',
            'fastfood': '–§–∞—Å—Ç—Ñ—É–¥',
            'bar': '–ë–∞—Ä',
            'bakery': '–ü–µ–∫–∞—Ä–Ω—è',
            'other': '–î—Ä—É–≥–æ–µ'
        }

        return type ? types[type] || type : '–ù–µ —É–∫–∞–∑–∞–Ω'
    }

    /**
     * Helper method to format grade
     */
    private formatGrade(grade: string): string {
        const grades: { [key: string]: string } = {
            'excellent': '–û—Ç–ª–∏—á–Ω–æ',
            'good': '–•–æ—Ä–æ—à–æ',
            'fair': '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ',
            'poor': '–ü–ª–æ—Ö–æ'
        }

        return grades[grade] || grade
    }

    /**
 * Helper method to format problems and goals
 */
    private formatProblemsGoals(data: any, type: 'problems' | 'goals'): string {
        const items: string[] = []

        const labels = type === 'problems' ? {
            lowProfit: '–ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å',
            noClients: '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤',
            hardToTrackMetrics: '–°–ª–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏',
            noDelivery: '–ù–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏',
            noCrmLoyalty: '–ù–µ—Ç CRM/–ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
            highStaffTurnover: '–í—ã—Å–æ–∫–∞—è —Ç–µ–∫—É—á–∫–∞ –∫–∞–¥—Ä–æ–≤',
            staffRecruitment: '–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–π–º–æ–º',
            noMobileApp: '–ù–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            reportingIssues: '–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å—é',
            noControlOverLocations: '–ù–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ª–æ–∫–∞—Ü–∏—è–º–∏',
            highPurchaseCosts: '–í—ã—Å–æ–∫–∏–µ –∑–∞–∫—É–ø–æ—á–Ω—ã–µ —Ü–µ–Ω—ã',
            supplierQualityIssues: '–ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞–≤–æ–∫',
            marketingDifficulties: '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º',
            highCompetition: '–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è'
        } : {
            onlineDelivery: '–û–Ω–ª–∞–π–Ω –¥–æ—Å—Ç–∞–≤–∫–∞',
            takeawayOrders: '–ó–∞–∫–∞–∑—ã –Ω–∞ –≤—ã–Ω–æ—Å',
            loyaltyProgram: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
            reviewsManagement: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏',
            inventoryAutomation: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞',
            mobileApp: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            qrMenuOnlinePayment: 'QR-–º–µ–Ω—é –∏ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞',
            staffManagement: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º',
            predictiveAnalytics: '–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            tableReservation: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤'
        }

        Object.entries(data).forEach(([key, value]) => {
            if (key === 'other' && value && typeof value === 'string') {
                items.push(`–î—Ä—É–≥–æ–µ: ${value}`)
            } else if (value === true) {
                const label = labels[key as keyof typeof labels]
                if (label) {
                    items.push(label)
                }
            }
        })

        return items.length > 0 ? items.join('\n‚Ä¢ ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
    }

    /**
     * Send message to Slack via BFF
     */
    private async sendSlackMessage(message: any): Promise<boolean> {
        try {
            const response = await fetch(`${this.bffUrl}/api/slack/webhook`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(message)
            })

            if (response.ok) {
                const result = await response.json()
                console.log('‚úÖ Slack notification sent successfully via BFF:', result.message)
                return true
            } else {
                const errorData = await response.json().catch(() => ({ error: 'Unknown error' }))
                console.error('‚ùå Failed to send Slack notification via BFF:', response.status, response.statusText, errorData)
                return false
            }
        } catch (error) {
            console.error('‚ùå Error sending Slack notification via BFF:', error)
            return false
        }
    }

    /**
     * Test Slack integration via BFF
     */
    async testSlackIntegration(): Promise<boolean> {
        if (!this.bffUrl) {
            console.warn('BFF URL not configured')
            return false
        }

        try {
            const response = await fetch(`${this.bffUrl}/api/slack/test`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })

            if (response.ok) {
                const result = await response.json()
                console.log('‚úÖ Slack test integration successful via BFF:', result.message)
                return true
            } else {
                const errorData = await response.json().catch(() => ({ error: 'Unknown error' }))
                console.error('‚ùå Slack test integration failed via BFF:', response.status, response.statusText, errorData)
                return false
            }
        } catch (error) {
            console.error('‚ùå Error testing Slack integration via BFF:', error)
            return false
        }
    }
}

// Export singleton instance
export const slackService = new SlackService() 